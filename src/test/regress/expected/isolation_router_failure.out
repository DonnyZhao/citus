Parsed test spec with 2 sessions

starting permutation: gdb-break select fail-worker-backends continue commit
assign_distributed_transaction_id

               
pg_advisory_lock

               
step gdb-break: 
  WITH pid AS (
    SELECT pid FROM pg_stat_activity WHERE application_name = 'gdb-process'
  ) SELECT citus.gdb_attach(pid.pid) FROM pid;

  -- fail one of the workers right after it's given a transaction id
  SELECT citus.run_command('!break FinishRemoteTransactionBegin');
  SELECT citus.run_command('continue');

gdb_attach     

               
run_command    

               
run_command    

               
step select: UPDATE test_table SET b = 2 WHERE a = 1; <waiting ...>
step fail-worker-backends: 
  SELECT master_run_on_worker(ARRAY['localhost'], ARRAY[57637], ARRAY['
   WITH pids AS (
	   SELECT process_id, pg_terminate_backend(process_id)
	   FROM get_all_active_transactions()
	   WHERE transaction_number = 1000
  ) SELECT count(1) FROM pids; -- array_agg(process_id) FROM pids;
  '], false)

master_run_on_worker

(localhost,57637,t,1)
step continue: 
  SELECT pg_advisory_unlock_all();

pg_advisory_unlock_all

               
WARNING:  terminating connection due to administrator command
step select: <... completed>
WARNING:  connection not open
step commit: COMMIT;
